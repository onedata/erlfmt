%%%--------------------------------------------------------------------
%%% @author Author
%%% @copyright (C) data
%%% This software is released under the MIT license
%%% cited in 'LICENSE.txt'.
%%% @end
%%%--------------------------------------------------------------------
%%% @doc
%%% doc.
%%% @end
%%%--------------------------------------------------------------------
-module(onedata).

-inlude("foo.hrl").
-inlude("bar.hrl").

%% API
-export([foo/1]).
-export([bar/0]).

% aggregator function applied when a new measurement is inserted into a time window
-type aggregator() :: sum | max | min | last | first | avg. % | {gather, Max}. % TODO VFS-8164 - extend functions list
-export_type([aggregator/0]).

-define(MONTH_RESOLUTION, 2592000).  % 30 days
-define(YEAR_RESOLUTION, 31536000).  % 365 days

-record(struct, {a, b, c}).


%%%===================================================================
%%% API functions
%%%===================================================================


qwe(#struct{
    a = 1,
    b = 2
}) ->
    atom.


-spec foo
    (0) -> 0;
    (1..3) -> 1;
    (4..5) -> 2;
    (6..9) -> 4.
foo(0) ->
    0;

foo(1) ->
    1;
foo(2) ->
    1;
foo(3) ->
    1;

foo(4) ->
    2;
foo(5) ->
    2;

foo(X) when
    X == 6;
    X == 7;
    X == 8;
    X == 9
->
    4.


%% commentos
-spec bar() -> ok | error.
bar() ->
    case method_to_json('POST') of
        <<"POST">> ->
            ok;

        <<"PUT">> ->
            foo(1),
            error;
        <<"GET">> ->
            foo(5),
            error
    end.


%%%===================================================================
%%% Internal functions
%%%===================================================================


%% @private
-spec method_to_json(atom()) -> binary().
method_to_json('POST') -> <<"POST">>;
method_to_json('PUT') -> <<"PUT">>;
method_to_json('GET') -> <<"GET">>.
